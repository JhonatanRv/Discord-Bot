import discord
from discord.ext import commands
import os
import asyncio
from dotenv import load_dotenv

# Carrega as vari√°veis do .env (ex: TOKEN)
load_dotenv()

# Configura√ß√£o dos intents necess√°rios para o bot funcionar corretamente
intents = discord.Intents.default()
intents.messages = True  # Permite que o bot veja mensagens
intents.message_content = True  # Necess√°rio para ler o conte√∫do das mensagens

# Cria a inst√¢ncia do bot com prefixo $ e os intents configurados
bot = commands.Bot(command_prefix="$", intents=intents)

# Define uma classe que representa o Modal de entrada de dados do usu√°rio
class GravarModal(discord.ui.Modal, title="Cadastro de Servi√ßo"):
    # Campos do formul√°rio (modal)
    titulo = discord.ui.TextInput(label="T√≠tulo do Servi√ßo", placeholder="Ex: Designer de Logo", max_length=100)
    nivel = discord.ui.TextInput(label="N√≠vel do Servi√ßo", placeholder="Ex: Iniciante / Avan√ßado", max_length=50)
    descricao = discord.ui.TextInput(label="Descri√ß√£o", style=discord.TextStyle.paragraph, placeholder="Descreva aqui...", max_length=300)
    pagamento = discord.ui.TextInput(label="Pagamento", placeholder="Ex: R$50 via Pix", max_length=100)

    # Fun√ß√£o executada quando o usu√°rio envia o modal
    async def on_submit(self, interaction: discord.Interaction):
        # Busca o canal de texto chamado "autorizar"
        canal_autorizar = discord.utils.get(interaction.guild.text_channels, name="autorizar")
        if not canal_autorizar:
            # Se o canal n√£o for encontrado, avisa o usu√°rio e encerra
            await interaction.response.send_message("Canal 'autorizar' n√£o encontrado.", ephemeral=True)
            return

        # Cria o embed (mensagem formatada) com os dados informados pelo usu√°rio
        embed = discord.Embed(title=self.titulo.value, color=discord.Color.blurple())
        embed.add_field(name="üìä N√≠vel do Servi√ßo", value=self.nivel.value, inline=False)
        embed.add_field(name="üíº Descri√ß√£o", value=self.descricao.value, inline=False)
        embed.add_field(name="üí∏ Pagamento", value=self.pagamento.value, inline=False)
        embed.set_footer(text=f"Solicitado por {interaction.user}", icon_url=interaction.user.avatar.url)

        # Envia o embed no canal "autorizar"
        msg = await canal_autorizar.send(embed=embed)

        # Adiciona rea√ß√µes de aprova√ß√£o e reprova√ß√£o
        await msg.add_reaction("‚úÖ")
        await msg.add_reaction("‚ùå")

        # Responde ao usu√°rio de forma privada que a solicita√ß√£o foi enviada
        await interaction.response.send_message("Seu servi√ßo foi enviado para autoriza√ß√£o!", ephemeral=True)

        # Define a verifica√ß√£o para capturar a rea√ß√£o correta do moderador
        def check(reaction, user):
            return (
                user != bot.user and str(reaction.emoji) in ["‚úÖ", "‚ùå"]
                and reaction.message.id == msg.id
            )

        try:
            # Aguarda uma rea√ß√£o por at√© 1 hora (3600 segundos)
            reaction, user = await bot.wait_for("reaction_add", timeout=3600, check=check)
            if str(reaction.emoji) == "‚úÖ":
                # Se aprovado, envia o embed para o canal "mensagens"
                canal_final = discord.utils.get(interaction.guild.text_channels, name="mensagens")
                if canal_final:
                    await canal_final.send(embed=embed)
                    await canal_autorizar.send(f"Aprovado por {user.mention} ‚úÖ")
            else:
                # Se recusado, apenas avisa no canal de autoriza√ß√£o
                await canal_autorizar.send(f"Recusado por {user.mention} ‚ùå")

        except asyncio.TimeoutError:
            # Se ningu√©m reagir dentro de 1 hora, avisa que expirou
            await canal_autorizar.send("Tempo esgotado para autoriza√ß√£o.")

# Evento que roda quando o bot entra em funcionamento
@bot.event
async def on_ready():
    print(f"Bot conectado como {bot.user}")
    try:
        # Sincroniza os comandos de barra (slash) com o Discord
        synced = await bot.tree.sync()
        print(f"Comandos sincronizados: {len(synced)}")
    except Exception as e:
        print(e)

# Define o comando de barra "/gravar" que abre o modal para o usu√°rio
@bot.tree.command(name="gravar", description="Registrar um novo servi√ßo")
async def gravar(interaction: discord.Interaction):
    await interaction.response.send_modal(GravarModal())

# Executa o bot com o token do arquivo .env
bot.run(os.getenv("TOKEN"))
